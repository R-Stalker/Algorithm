#include <iostream>
#include <string>
#include <cassert>
using std::cin;
using std::cout;
using std::endl;
using std::string;

template <typename Type> class Stack{
private:
    Type *elements;
    int top_index, max_size;
public:
    Stack(int input_length){
        elements = new Type[input_length];
        max_size = input_length;
        top_index = -1;
    }
    ~Stack(){
        delete[] elements;
    }
    bool push(const Type &element){
        if(top_index + 1 >= max_size){
            return false;
        }
        top_index++;
        elements[top_index] = element;
        return true;
    }
    bool empty(){
        return top_index < 0;
    }
    void pop(){
        top_index--;
    }
    Type top(){
        assert(top_index >= 0);
        return elements[top_index];
    }
};

int main(){
    int N;
    cin >> N;
    Stack<int> stack(N); 
    int *arr = new int[N];
    for(int i = 0; i < N; i++){
        cin >> arr[i];
    }
    int max = 0;
    for(int i = 0; i < N; i++){
        for(int j = max+1; j <= arr[i]; j++){
            max = j;
            stack.push(j);
        }
        if(stack.top() != arr[i]){
            cout << "NO" << endl;
            return 0;
        }else{
            stack.pop();
        }
    }
    cout << "YES" << endl;
    return 0;
}
